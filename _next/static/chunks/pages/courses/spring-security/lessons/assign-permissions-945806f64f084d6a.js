(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[453],{2548:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/courses/spring-security/lessons/assign-permissions",function(){return c(6555)}])},2018:function(d,b,a){"use strict";var e=a(5893),c=a(5927),f=a.n(c);b.Z=function(a){var c=a.href,d=a.children,b=a.target;return(0,e.jsxs)("a",{href:c,target:void 0===b?"":b,className:"text-decoration-none","data-bs-toggle":"tooltip","data-bs-title":"Read article",children:[(0,e.jsx)("i",{className:"bi bi-file-text ".concat(f().linkIcon)}),(0,e.jsx)("span",{className:f().linkText,children:d})]})}},476:function(d,b,a){"use strict";var e=a(7568),c=a(4051),f=a.n(c),g=a(5893),h=a(637),i=a(7294),j=a(1896);b.Z=function(a){var l,b=a.fileName,m=a.href,c=a.language,d=void 0===c?"java":c,n=a.children,k=(0,i.useState)(!1),o=k[0],q=k[1],p=(l=(0,e.Z)(f().mark(function a(){return f().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,navigator.clipboard.writeText(n);case 2:q(!0),setTimeout(function(){return q(!1)},6e3);case 4:case"end":return a.stop()}},a)})),function(){return l.apply(this,arguments)});return(0,g.jsxs)("div",{className:"border rounded fs-6 my-4",children:[b&&(0,g.jsxs)("div",{className:"p-3 bg-light border-bottom",children:[(0,g.jsx)("span",{className:"font-monospace",children:(0,g.jsx)("a",{href:m,target:"_blank",children:b})}),(0,g.jsx)("span",{className:"float-end cursor-pointer","data-bs-toggle":"tooltip","data-bs-title":"Copy code",onClick:p,children:(0,g.jsx)("i",{className:"bi-clipboard"})})]}),(0,g.jsx)("pre",{className:"m-0 px-3 pb-3",children:(0,g.jsx)("code",{className:"language-".concat(d),children:(0,g.jsx)("span",{dangerouslySetInnerHTML:{__html:h.Z.highlight(n,{language:d}).value}})})}),o&&(0,g.jsx)(j.Z,{children:"Code copied to clipboard"})]})}},9963:function(d,b,a){"use strict";a.d(b,{aC:function(){return h},k8:function(){return i},nL:function(){return g}});var e=a(5893),c=a(4046),f=a.n(c);function g(a){var b=a.children;return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("h1",{className:"display-5 mt-2 mb-2",children:b}),(0,e.jsx)("p",{className:f().underline})]})}function h(a){var b=a.children;return(0,e.jsx)("h3",{className:"fw-light mt-5 mb-2",children:b})}function i(a){var b=a.children;return(0,e.jsx)("h4",{className:"fw-light mt-5 mb-2",children:b})}},4621:function(c,a,b){"use strict";var d=b(5893);a.Z=function(a){var c=a.src,b=a.title;return(0,d.jsxs)("div",{className:"p-3",children:[(0,d.jsx)("div",{className:"mb-3 text-secondary text-center",children:(0,d.jsx)("em",{children:b})}),(0,d.jsx)("img",{className:"img-fluid rounded border shadow",src:c,alt:b})]})}},7291:function(d,b,a){"use strict";var e=a(5893),c=a(9472),f=a.n(c);b.Z=function(a){var b=a.children;return(0,e.jsx)("mark",{className:"font-monospace border rounded p-1 ".concat(f().mark),children:b})}},3968:function(d,b,a){"use strict";var e=a(5893),c=a(3394),f=a.n(c);b.Z=function(a){var b=a.title,c=a.children;return(0,e.jsxs)("section",{className:"px-3 pt-1 my-5 ".concat(f().notes),children:[(0,e.jsxs)("h4",{className:"mb-3",children:[(0,e.jsx)("i",{className:"bi bi-info-circle me-2"}),void 0===b?"Note":b]}),c]})}},6555:function(f,b,a){"use strict";a.r(b);var g=a(5893),h=a(9963),i=a(130),j=a(7291),k=a(476),l=a(4621),c=a(3274),d=a(9927),e=a(358),m=a(3968),n=a(2018);b.default=(0,c.default)(function(b){var a=b.githubPath;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)("section",{children:[(0,g.jsx)(h.nL,{children:"Assign Permissions"}),(0,g.jsxs)(i.Z,{children:["In this chapter we will provide all the roles and permissions associated with each user in the ",(0,g.jsx)(j.Z,{children:"UserDetails"})," object using ",(0,g.jsx)(j.Z,{children:"authorities()"}),"."]})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"ROLE_ Prefix"}),(0,g.jsxs)(i.Z,{children:["Remember we have applied both role-based as well as permission-based access restrictions to different APIs using ",(0,g.jsx)(j.Z,{children:"hasRole()"})," and  ",(0,g.jsx)(j.Z,{children:"hasAuthority()"})," in ",(0,g.jsx)(j.Z,{children:"HttpSecurity"})," configuration. We have to provide both roles and permissions for each user in ",(0,g.jsx)(j.Z,{children:"UserDetails"})," object."]}),(0,g.jsxs)(i.Z,{children:["But as mentioned in ",(0,g.jsx)(n.Z,{href:"/courses/spring-security/lessons/role-based-authorization",children:"Role Based Authorization"})," chapter, we can not use them both on ",(0,g.jsx)(j.Z,{children:"UserBuilder"})," class, as the latter will always override the authorities set by the former. So we can only use ",(0,g.jsx)(j.Z,{children:"authorities()"})," by combining roles and permissions, where each role must be prefixed with ",(0,g.jsx)("strong",{children:"ROLE_"}),"."]}),(0,g.jsxs)(i.Z,{children:["Let's update the existing ",(0,g.jsx)(j.Z,{children:"getRoles()"})," to append the prefix ",(0,g.jsx)("strong",{children:"ROLE_"})," with each role assigned to the user as below:"]}),(0,g.jsx)(k.Z,{fileName:"DbUserDetailsService.java",href:a+"/src/main/java/com/facadecode/spring/security/service/DbUserDetailsService.java",children:'\nprivate Set<String> getRoles(Set<AppRole> roles) {\n    return roles.stream()\n          .map(role -> String.format("ROLE_%s", role.getName().name()))\n          .collect(Collectors.toSet());\n}\n'})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Consolidate Permissions"}),(0,g.jsxs)(i.Z,{children:["As one user has many roles and each role has many permissions, we need to combine all the permissions associated with each roles assigned to the user like below in a private method in ",(0,g.jsx)(j.Z,{children:"DbUserDetailService"}),"."]}),(0,g.jsx)(k.Z,{fileName:"DbUserDetailsService.java",href:a+"/src/main/java/com/facadecode/spring/security/service/DbUserDetailsService.java",children:"\nprivate Set<String> getPermissions(Set<AppRole> roles) {\n    return roles.stream()\n        .flatMap(role -> role.getPermissions().stream())\n        .map(permission -> permission.getName().name())\n        .collect(Collectors.toSet());\n}    \n"})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Combine Roles and Permissions in Authorities"}),(0,g.jsxs)(i.Z,{children:["Now we will remove the roles() method and use only authorities() in ",(0,g.jsx)(j.Z,{children:"User.builder()"})," to combine roles and permissions for each user as below:"]}),(0,g.jsx)(k.Z,{fileName:"DbUserDetailsService.java",href:a+"/src/main/java/com/facadecode/spring/security/service/DbUserDetailsService.java",children:"\npublic List<UserDetails> getAllUserDetails() {\n    return appUserRepository.findAll()\n        .stream()\n        .map(appUser -> User.builder()\n                .username(appUser.getUsername())\n                .password(appUser.getPassword())\n                .authorities(this.getRolesAndPermissions(appUser.getRoles()))\n                .build()\n        )\n        .collect(Collectors.toList());\n}\n\nprivate String[] getRolesAndPermissions(Set<AppRole> appRoles) {\n    Set<String> roles = this.getRoles(appRoles);\n    Set<String> permissions = this.getPermissions(appRoles);\n    return new HashSet<String>() {\n        {\n            addAll(roles);\n            addAll(permissions);\n        }\n    }.toArray(new String[0]);\n}\n"}),(0,g.jsx)(i.Z,{children:"Finally we can expect each users to have their roles and permissions combined in the form of authorities as mentioned in the below table."}),(0,g.jsxs)("table",{className:"table table-striped mb-4",children:[(0,g.jsx)("thead",{children:(0,g.jsxs)("tr",{children:[(0,g.jsx)("th",{children:"User"}),(0,g.jsx)("th",{children:"Authorities"})]})}),(0,g.jsxs)("tbody",{children:[(0,g.jsxs)("tr",{children:[(0,g.jsx)("td",{children:"Gru, Lucy"}),(0,g.jsxs)("td",{children:["ROLE_INSTRUCTOR ",(0,g.jsx)("br",{})," CREATE_COURSE ",(0,g.jsx)("br",{})," UPDATE_COURSE ",(0,g.jsx)("br",{})," PLAY_COURSE ",(0,g.jsx)("br",{})," VIEW_PROFILE"]})]}),(0,g.jsxs)("tr",{children:[(0,g.jsx)("td",{children:"Bob, Kevin, Stuart"}),(0,g.jsxs)("td",{children:["ROLE_STUDENT ",(0,g.jsx)("br",{})," PLAY_COURSE ",(0,g.jsx)("br",{})," VIEW_PROFILE"]})]}),(0,g.jsxs)("tr",{children:[(0,g.jsx)("td",{children:"Admin"}),(0,g.jsxs)("td",{children:["ROLE_ADMIN ",(0,g.jsx)("br",{})," LIST_STUDENTS ",(0,g.jsx)("br",{})," LIST_INSTRUCTORS"]})]})]})]}),(0,g.jsxs)(i.Z,{children:["Restart the application and send a request to ",(0,g.jsx)("u",{children:"PlayCourse"})," API for any course as either a Student (Bob) or an Instructor (Gru). We can see the Course detail as the response (the response is similar to ",(0,g.jsx)("u",{children:"GetCourse"})," API, let's not worry about what the API is doing, we are only interested in securing it from Admin)."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson11-01.png",title:"Course detail response for Gru (Instructor) who has PLAY_COURSE authority"}),(0,g.jsxs)(i.Z,{children:["We will get ",(0,g.jsx)("em",{children:"403 Forbidden"})," error while we send the same request as an Admin user as he does not have PLAY_COURSE authority."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson11-02.png",title:"403 Forbidden error for Admin who does not have PLAY_COURSE authority"})]}),(0,g.jsx)(m.Z,{children:(0,g.jsxs)(i.Z,{children:["So far we have just restricted the access to the ",(0,g.jsx)("u",{children:"PlayCourse"})," API for the Admin user using Permissions instead of Roles. But we are yet to restrict the Student user to play only the course they are enrolled with, as per the Security Objective defined in ",(0,g.jsx)(n.Z,{href:"/courses/spring-security/lessons/introduction",children:"Introduction"})," chapter."]})})]})},(0,e.s)(d.Z,"assign-permissions"))},5927:function(a){a.exports={linkIcon:"ArticleLink_linkIcon__cf7b_",linkText:"ArticleLink_linkText__b7K5H"}},4046:function(a){a.exports={heading:"Heading_heading__aP_DN",underline:"Heading_underline__sSwtx"}},9472:function(a){a.exports={mark:"Mark_mark__8gh_T"}},3394:function(a){a.exports={notes:"Notes_notes__up3CK"}}},function(a){a.O(0,[734,428,637,274,774,888,179],function(){var b;return a(a.s=2548)}),_N_E=a.O()}])