(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[804],{2007:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/courses/spring-security/lessons/verify-token",function(){return c(5736)}])},476:function(d,b,a){"use strict";var e=a(7568),c=a(4051),f=a.n(c),g=a(5893),h=a(637),i=a(7294),j=a(1896);b.Z=function(a){var l,b=a.fileName,m=a.href,c=a.language,d=void 0===c?"java":c,n=a.children,k=(0,i.useState)(!1),o=k[0],q=k[1],p=(l=(0,e.Z)(f().mark(function a(){return f().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,navigator.clipboard.writeText(n);case 2:q(!0),setTimeout(function(){return q(!1)},6e3);case 4:case"end":return a.stop()}},a)})),function(){return l.apply(this,arguments)});return(0,g.jsxs)("div",{className:"border rounded fs-6 my-4",children:[b&&(0,g.jsxs)("div",{className:"p-3 bg-light border-bottom",children:[(0,g.jsx)("span",{className:"font-monospace",children:(0,g.jsx)("a",{href:m,target:"_blank",children:b})}),(0,g.jsx)("span",{className:"float-end cursor-pointer","data-bs-toggle":"tooltip","data-bs-title":"Copy code",onClick:p,children:(0,g.jsx)("i",{className:"bi-clipboard"})})]}),(0,g.jsx)("pre",{className:"m-0 px-3 pb-3",children:(0,g.jsx)("code",{className:"language-".concat(d),children:(0,g.jsx)("span",{dangerouslySetInnerHTML:{__html:h.Z.highlight(n,{language:d}).value}})})}),o&&(0,g.jsx)(j.Z,{children:"Code copied to clipboard"})]})}},9963:function(d,b,a){"use strict";a.d(b,{aC:function(){return h},k8:function(){return i},nL:function(){return g}});var e=a(5893),c=a(4046),f=a.n(c);function g(a){var b=a.children;return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("h1",{className:"display-5 mt-2 mb-2",children:b}),(0,e.jsx)("p",{className:f().underline})]})}function h(a){var b=a.children;return(0,e.jsx)("h3",{className:"fw-light mt-5 mb-2",children:b})}function i(a){var b=a.children;return(0,e.jsx)("h4",{className:"fw-light mt-5 mb-2",children:b})}},4621:function(c,a,b){"use strict";var d=b(5893);a.Z=function(a){var c=a.src,b=a.title;return(0,d.jsxs)("div",{className:"p-3",children:[(0,d.jsx)("div",{className:"mb-3 text-secondary text-center",children:(0,d.jsx)("em",{children:b})}),(0,d.jsx)("img",{className:"img-fluid rounded border shadow",src:c,alt:b})]})}},7291:function(d,b,a){"use strict";var e=a(5893),c=a(9472),f=a.n(c);b.Z=function(a){var b=a.children;return(0,e.jsx)("mark",{className:"font-monospace border rounded p-1 ".concat(f().mark),children:b})}},6614:function(d,b,a){"use strict";var e=a(5893),c=a(3394),f=a.n(c);b.Z=function(a){var b=a.title,c=a.children;return(0,e.jsxs)("section",{className:"px-3 pt-1 my-5 ".concat(f().notes),children:[(0,e.jsxs)("h4",{className:"mb-3",children:[(0,e.jsx)("i",{className:"bi bi-info-circle me-2"}),void 0===b?"Note":b]}),c]})}},5736:function(f,b,a){"use strict";a.r(b);var g=a(5893),h=a(9963),i=a(130),j=a(7291),k=a(476),l=a(4621);a(6614);var c=a(3274),d=a(9927),e=a(358);b.default=(0,c.default)(function(b){var a=b.githubPath;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)("section",{children:[(0,g.jsx)(h.nL,{children:"Verify Token"}),(0,g.jsxs)(i.Z,{children:["Assume we have a Single Page Application (SPA) calling our ",(0,g.jsx)("u",{children:"GenerateToken"})," API on behalf of the user with the username and password provided by the user himself. Once the API authenticates and issues the token, the SPA will store the token somewhere to send it back in subsequent requests as a Bearer token in the ",(0,g.jsx)(j.Z,{children:"Authorization"})," header in the format ",(0,g.jsx)(j.Z,{children:"Bearer <TOKEN>"}),"."]}),(0,g.jsx)(i.Z,{children:"Bearer token is a security token similar to cash, whoever possess the token can use it in any way the token is intended for. Using a bearer token does not require a bearer to prove the possession of the token. So it must be stored securely and transferred over a secure network."})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Find user by token"}),(0,g.jsxs)(i.Z,{children:["In order to verify the token, we need to identify the user associated with the token as well as ensure the token is not expired. So we will find the ",(0,g.jsx)(j.Z,{children:"AppUser"})," by ",(0,g.jsx)("em",{children:"token"})," and ",(0,g.jsx)("em",{children:"tokenExpiryTime"})," greater than the current time using standard Spring Data JPA method in AppUserRepository."]}),(0,g.jsx)(k.Z,{fileName:"AppUserRepository.java",href:a+"/src/main/java/com/facadecode/spring/security/repo/AppUserRepository.java",children:"\n@Repository\npublic interface AppUserRepository extends JpaRepository<AppUser, Long> {\n    // Other methods omitted for brevity\n    Optional<AppUser> findByTokenAndTokenExpiryTimeGreaterThan(String token, Date currentDate);\n}\n"}),(0,g.jsxs)(i.Z,{children:["Similar to ",(0,g.jsx)(j.Z,{children:"loadUserByUsername()"})," we will implement a method in ",(0,g.jsx)(j.Z,{children:"DbUserDetailsService"})," to call the above repository method and return the ",(0,g.jsx)(j.Z,{children:"UserDetails"})," object mapped from the ",(0,g.jsx)(j.Z,{children:"AppUser"})," record. By passing current time along with token we ensure that the ",(0,g.jsx)(j.Z,{children:"AppUser"})," record returned is not only matching the ",(0,g.jsx)("em",{children:"token"})," but also it's ",(0,g.jsx)("em",{children:"tokenExpiryTime"})," is always greater than the current time."]}),(0,g.jsx)(k.Z,{fileName:"DbUserDetailsService.java",href:a+"/src/main/java/com/facadecode/spring/security/service/DbUserDetailsService.java",children:'\npublic UserDetails loadUserByToken(String token) throws UsernameNotFoundException {\n    AppUser appUser = appUserRepository.findByTokenAndTokenExpiryTimeGreaterThan(token, new Date())\n            .orElseThrow(() -> new BadCredentialsException("Provided token is either expired or not found"));\n\n    return User.builder()\n        .username(appUser.getUsername())\n        .password(appUser.getPassword())\n        .authorities(this.getPermissions(appUser.getRoles()))\n        .build();\n}\n'})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"TokenVerificationFilter"}),(0,g.jsxs)(i.Z,{children:["Before the request reaches the endpoint we have to intercept the request and authenticate the user by the token extracted from the ",(0,g.jsx)(j.Z,{children:"Authorization"})," header. This can be done using standard Spring filter extending ",(0,g.jsx)(j.Z,{children:"OncePerRequestFilter"}),". Let's create the ",(0,g.jsx)(j.Z,{children:"TokenVerficiationFilter"})," component in order to perform the steps mentioned in the comments."]}),(0,g.jsx)(k.Z,{fileName:"TokenVerficationFilter.java",href:a+"/src/main/java/com/facadecode/spring/security/filters/TokenVerificationFilter.java",children:"\n@Component  \npublic class TokenVerificationFilter extends OncePerRequestFilter {\n    @Override  \n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        // Extract the token from the Authorization header\n        // Identify the user by token using the above loadUserByToken() service method\n        // Create Authentication object as authenticated principal\n        // Set Authentication in SecurityContext\n        filterChain.doFilter(request, response);\n    }\n}\n"}),(0,g.jsxs)(i.Z,{children:["The format of the ",(0,g.jsx)(j.Z,{children:"Authorization"})," header value will be ",(0,g.jsx)(j.Z,{children:"Bearer <TOKEN>"}),", so we have to remove the prefix ",(0,g.jsx)("em",{children:"Bearer"})," (with a whitespace) to get only the token value. We will use the token to find the ",(0,g.jsx)(j.Z,{children:"UserDetails"})," object from the above ",(0,g.jsx)(j.Z,{children:"loadUserByToken()"})," service method."]}),(0,g.jsxs)(i.Z,{children:["Remember we have used ",(0,g.jsx)(j.Z,{children:"UsernamePasswordAuthenticationToken"})," in ",(0,g.jsx)(j.Z,{children:"generateToken()"})," service in order to create ",(0,g.jsx)(j.Z,{children:"Authentication"})," object as an authentication request using ",(0,g.jsx)("em",{children:"username"})," and ",(0,g.jsx)("em",{children:"password"}),". Here we are using the same to create ",(0,g.jsx)(j.Z,{children:"Authentication"})," object as an authenticated principal using ",(0,g.jsx)("em",{children:"username"})," and his ",(0,g.jsx)("em",{children:"authorities"})," retrieved from the ",(0,g.jsx)(j.Z,{children:"UserDetails"})," object. We will then set it in ",(0,g.jsx)(j.Z,{children:"SecurityContext"})," by ourselves to make it available through out the request in order to authorize the user at various layers."]}),(0,g.jsx)(k.Z,{fileName:"TokenVerificationFilter.java",href:a+"/src/main/java/com/facadecode/spring/security/filters/TokenVerificationFilter.java",children:'\n@Component\npublic class TokenVerificationFilter extends OncePerRequestFilter {\n    // Other details omitted for brevity\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        // Extract the token from the Authorization header\n        String authorizationHeader = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {\n            String token = authorizationHeader.replace("Bearer ", "");\n            // Identify the user by token using the above loadUserByToken() service method\n            UserDetails userDetails = userDetailsService.loadUserByToken(token);\n\n            if (userDetails != null) {\n                // Create Authentication object as authenticated principal\n                Authentication authentication = UsernamePasswordAuthenticationToken.authenticated(\n                        userDetails.getUsername(), null, userDetails.getAuthorities()\n                );\n                // Set Authentication in SecurityContext\n                authenticationFacade.setAuthentication(authentication);\n            }\n        }\n\n        filterChain.doFilter(request, response);\n    }\n}\n'})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Configure TokenVerficiationFilter"}),(0,g.jsxs)(i.Z,{children:["Finally let's configure ",(0,g.jsx)(j.Z,{children:"TokenVerficiationFilter"})," in ",(0,g.jsx)(j.Z,{children:"HttpSecurity"})," configuration to let all the requests pass through it before attempting to authenticate the user with ",(0,g.jsx)(j.Z,{children:"UsernamePasswordAuthenticationFilter"}),"."]}),(0,g.jsx)(k.Z,{fileName:"ApiSecurityConfig.java",href:a+"/src/main/java/com/facadecode/spring/security/config/ApiSecurityConfig.java",children:"\n@Bean\npublic SecurityFilterChain apiFilterChain(HttpSecurity http) throws Exception {\n    http\n        .csrf().disable()\n        .addFilterBefore(tokenVerificationFilter, UsernamePasswordAuthenticationFilter.class)\n        .sessionManagement(\n            httpSecuritySessionManagementConfigurer ->\n                    httpSecuritySessionManagementConfigurer.sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n        )\n        .authorizeRequests(auth -> auth\n            .antMatchers(POST, API_AUTH_TOKEN).permitAll()\n            .antMatchers(GET, PUBLIC_API_LIST).permitAll()\n            .anyRequest().authenticated()\n        );\n    return http.build();\n}\n"}),(0,g.jsxs)(i.Z,{children:["Restart the application and get the token generated for ",(0,g.jsx)("em",{children:"Admin"})," user credentials by sending a POST request to ",(0,g.jsx)("u",{children:"GenerateToken"})," API."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson24-01.png",title:"UUID token generated for Admin user credentials on successful authentication"}),(0,g.jsxs)(i.Z,{children:["Now choose the Authorization type as ",(0,g.jsx)(j.Z,{children:"Bearer Token"}),", and paste the generated token in the Token Field. If we send a GET request to ",(0,g.jsx)("u",{children:"ListStudents"})," API with the Bearer Token set in the Authorization header, the request will be intercepted by ",(0,g.jsx)(j.Z,{children:"TokenVerificationFilter"})," to authenticate the request by the token. Once the authentication is success the ",(0,g.jsx)(j.Z,{children:"Authentication"})," object is set in ",(0,g.jsx)(j.Z,{children:"SecurityContext"})," for Spring Security to authorize the user in the appropriate layers. And we will get the response back for the authorized user request like below:"]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson24-02.png",title:"List of students response for the authorized token issed for Admin user"}),(0,g.jsxs)(i.Z,{children:["Similarly you can test the same for different users and their authorized actions. You can also use the token after it's expiry time to see ",(0,g.jsx)("em",{children:"403 Forbidden"})," error which then requires you to re-authenticate the user to generate a new token."]})]})]})},(0,e.s)(d.Z,"verify-token"))},4046:function(a){a.exports={heading:"Heading_heading__aP_DN",underline:"Heading_underline__sSwtx"}},9472:function(a){a.exports={mark:"Mark_mark__8gh_T"}},3394:function(a){a.exports={notes:"Notes_notes__up3CK"}}},function(a){a.O(0,[734,428,637,274,774,888,179],function(){var b;return a(a.s=2007)}),_N_E=a.O()}])