(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[839],{114:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/courses/spring-security/lessons/appuser-authentication",function(){return c(3589)}])},476:function(d,b,a){"use strict";var e=a(7568),c=a(4051),f=a.n(c),g=a(5893),h=a(637),i=a(7294),j=a(1896);b.Z=function(a){var l,b=a.fileName,m=a.href,c=a.language,d=void 0===c?"java":c,n=a.children,k=(0,i.useState)(!1),o=k[0],q=k[1],p=(l=(0,e.Z)(f().mark(function a(){return f().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,navigator.clipboard.writeText(n);case 2:q(!0),setTimeout(function(){return q(!1)},6e3);case 4:case"end":return a.stop()}},a)})),function(){return l.apply(this,arguments)});return(0,g.jsxs)("div",{className:"border rounded fs-6 my-4",children:[b&&(0,g.jsxs)("div",{className:"p-3 bg-light border-bottom",children:[(0,g.jsx)("span",{className:"font-monospace",children:(0,g.jsx)("a",{href:m,target:"_blank",children:b})}),(0,g.jsx)("span",{className:"float-end cursor-pointer","data-bs-toggle":"tooltip","data-bs-title":"Copy code",onClick:p,children:(0,g.jsx)("i",{className:"bi-clipboard"})})]}),(0,g.jsx)("pre",{className:"m-0 px-3 pb-3",children:(0,g.jsx)("code",{className:"language-".concat(d),children:(0,g.jsx)("span",{dangerouslySetInnerHTML:{__html:h.Z.highlight(n,{language:d}).value}})})}),o&&(0,g.jsx)(j.Z,{children:"Code copied to clipboard"})]})}},9963:function(d,b,a){"use strict";a.d(b,{aC:function(){return h},k8:function(){return i},nL:function(){return g}});var e=a(5893),c=a(4046),f=a.n(c);function g(a){var b=a.children;return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("h1",{className:"display-5 mt-2 mb-2",children:b}),(0,e.jsx)("p",{className:f().underline})]})}function h(a){var b=a.children;return(0,e.jsx)("h3",{className:"fw-light mt-5 mb-2",children:b})}function i(a){var b=a.children;return(0,e.jsx)("h4",{className:"fw-light mt-5 mb-2",children:b})}},4621:function(c,a,b){"use strict";var d=b(5893);a.Z=function(a){var c=a.src,b=a.title;return(0,d.jsxs)("div",{className:"p-3",children:[(0,d.jsx)("div",{className:"mb-3 text-secondary text-center",children:(0,d.jsx)("em",{children:b})}),(0,d.jsx)("img",{className:"img-fluid rounded border shadow",src:c,alt:b})]})}},7291:function(d,b,a){"use strict";var e=a(5893),c=a(9472),f=a.n(c);b.Z=function(a){var b=a.children;return(0,e.jsx)("mark",{className:"font-monospace border rounded p-1 ".concat(f().mark),children:b})}},3589:function(f,b,a){"use strict";a.r(b);var g=a(5893),h=a(9963),i=a(130),j=a(7291),k=a(476),l=a(4621),c=a(3274),d=a(9927),e=a(358);b.default=(0,c.default)(function(b){var a=b.githubPath;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)("section",{children:[(0,g.jsx)(h.nL,{children:"Authentication with AppUser"}),(0,g.jsxs)(i.Z,{children:["So far we have authenticated using the default user and the random password provided by Spring Security. But as in any web applications we want to authenticate using our application users, which were created in the database by ",(0,g.jsx)(j.Z,{children:"AppDataInitialiser"})," when the application bootstraps. Let's see how we can do this using one of the implementations of ",(0,g.jsx)(j.Z,{children:"UserDetailsService"})," provided by Spring Security."]})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"InMemoryUserDetailsManager"}),(0,g.jsxs)(i.Z,{children:["Spring Security uses ",(0,g.jsx)(j.Z,{children:"UserDetailsService"})," as the core interface to load user-specific data by username, and it requires only one read-only method."]}),(0,g.jsx)(k.Z,{children:"\npublic interface UserDetailsService {\n    UserDetails loadUserByUsername(String username)\n            throws UsernameNotFoundException;\n}\n"}),(0,g.jsxs)(i.Z,{children:[(0,g.jsx)(j.Z,{children:"InMemoryUserDetailsManager"})," is one of the implementations provided by Spring Security. It is a non-persistant implementation backed by an in-memory map mainly intended for testing and demonstration purposes only. It accepts a collection of ",(0,g.jsx)(j.Z,{children:"UserDetails"})," objects, which is the same as the return type of the above ",(0,g.jsx)(j.Z,{children:"loadUserByUsername()"})," method."]})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Create UserDetails from database"}),(0,g.jsxs)(i.Z,{children:["Before registering ",(0,g.jsx)(j.Z,{children:"InMemoryUserDetailsManager"})," bean, let's create a collection of ",(0,g.jsx)(j.Z,{children:"UserDetails"})," objects. We can do this by fetching all the ",(0,g.jsx)(j.Z,{children:"AppUser"})," records from the database, map them all with ",(0,g.jsx)(j.Z,{children:"User"})," class and return the collection from a ",(0,g.jsx)(j.Z,{children:"@Service"})," method like below."]}),(0,g.jsx)(k.Z,{fileName:"DbUserDetailsService.java",href:a+"/src/main/java/com/facadecode/spring/security/service/DbUserDetailsService.java",children:'\n@Service\npublic class DbUserDetailsService {\n    @Autowired\n    private AppUserRepository appUserRepository;\n\n    public List<UserDetails> getAllUserDetails() {\n        return appUserRepository.findAll()\n                .stream()\n                .map(appUser -> User.builder()\n                        .username(appUser.getUsername())\n                        .password(String.format("{noop}%s", appUser.getPassword()))\n                        .authorities(Collections.EMPTY_SET)\n                        .build()\n                )\n                .collect(Collectors.toList());\n    }\n}\n'}),(0,g.jsxs)(i.Z,{children:[(0,g.jsx)(j.Z,{children:"User"})," is one of the implementations of ",(0,g.jsx)(j.Z,{children:"UserDetails"})," interface with a convenient Builder class. Here we have mapped ",(0,g.jsx)("em",{children:"username"})," and ",(0,g.jsx)("em",{children:"password"})," only and left the authorities as an empty ",(0,g.jsx)(j.Z,{children:"Set"})," as we are focusing only on authenticating application users for now."]}),(0,g.jsxs)(i.Z,{children:["We must provide the correct password encoding schema used to encode the passwords stored in the database. We can do this by prefixing each password with the appropriate string literal representing the ",(0,g.jsx)(j.Z,{children:"PasswordEncoder"}),". In our case we have not encrypted the passwords in the database, we are prefixing it with ",(0,g.jsx)(j.Z,{children:"{noop}"}),". This prefix tells Spring Security to use ",(0,g.jsx)(j.Z,{children:"NoOpPasswordEncoder"})," for password verification while authenticating the application user."]})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Register InMemoryUserDetailsManager Bean"}),(0,g.jsxs)(i.Z,{children:["Now with the list of ",(0,g.jsx)(j.Z,{children:"UserDetails"})," objects in hand, we can create and register an ",(0,g.jsx)(j.Z,{children:"InMemoryUserDetailsManager"})," bean inside a new ",(0,g.jsx)(j.Z,{children:"@Configuration"})," class like below."]}),(0,g.jsx)(k.Z,{fileName:"SecurityBean.java",href:a+"/src/main/java/com/facadecode/spring/security/config/SecurityBean.java",children:"\n@Configuration\npublic class SecurityBean {\n    @Autowired\n    private DbUserDetailsService dbUserDetailsService;\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        return new InMemoryUserDetailsManager(\n                dbUserDetailsService.getAllUserDetails()\n        );\n    }\n}\n"})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Verify authentication using AppUser"}),(0,g.jsxs)(i.Z,{children:["When we restart the application, we can notice Spring Security is no longer generating the random password. And it no longer creates the default user also. It uses ",(0,g.jsx)(j.Z,{children:"InMemoryUserDetailsManager"})," bean to hold the list of ",(0,g.jsx)(j.Z,{children:"UserDetails"})," mapped from the ",(0,g.jsx)(j.Z,{children:"AppUser"})," records in the database."]}),(0,g.jsxs)(i.Z,{children:["We can use any of these AppUser from the database to authenticate in order to access the secured REST APIs. Let's use Bob and his credential to access the ",(0,g.jsx)("u",{children:"ListStudents"})," API in Postman using Basic Auth."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson05-02.png",title:"List of all student records returned for the application user (Bob)"})]})]})},(0,e.s)(d.Z,"appuser-authentication"))},4046:function(a){a.exports={heading:"Heading_heading__aP_DN",underline:"Heading_underline__sSwtx"}},9472:function(a){a.exports={mark:"Mark_mark__8gh_T"}}},function(a){a.O(0,[734,428,637,274,774,888,179],function(){var b;return a(a.s=114)}),_N_E=a.O()}])