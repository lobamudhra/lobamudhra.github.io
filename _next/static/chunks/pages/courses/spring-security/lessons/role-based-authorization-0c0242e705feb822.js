(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[684],{4285:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/courses/spring-security/lessons/role-based-authorization",function(){return c(3511)}])},2018:function(d,b,a){"use strict";var e=a(5893),c=a(5927),f=a.n(c);b.Z=function(a){var c=a.href,d=a.children,b=a.target;return(0,e.jsxs)("a",{href:c,target:void 0===b?"":b,className:"text-decoration-none","data-bs-toggle":"tooltip","data-bs-title":"Read article",children:[(0,e.jsx)("i",{className:"bi bi-file-text ".concat(f().linkIcon)}),(0,e.jsx)("span",{className:f().linkText,children:d})]})}},476:function(d,b,a){"use strict";var e=a(7568),c=a(4051),f=a.n(c),g=a(5893),h=a(637),i=a(7294),j=a(1896);b.Z=function(a){var l,b=a.fileName,m=a.href,c=a.language,d=void 0===c?"java":c,n=a.children,k=(0,i.useState)(!1),o=k[0],q=k[1],p=(l=(0,e.Z)(f().mark(function a(){return f().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,navigator.clipboard.writeText(n);case 2:q(!0),setTimeout(function(){return q(!1)},6e3);case 4:case"end":return a.stop()}},a)})),function(){return l.apply(this,arguments)});return(0,g.jsxs)("div",{className:"border rounded fs-6 my-4",children:[b&&(0,g.jsxs)("div",{className:"p-3 bg-light border-bottom",children:[(0,g.jsx)("span",{className:"font-monospace",children:(0,g.jsx)("a",{href:m,target:"_blank",children:b})}),(0,g.jsx)("span",{className:"float-end cursor-pointer","data-bs-toggle":"tooltip","data-bs-title":"Copy code",onClick:p,children:(0,g.jsx)("i",{className:"bi-clipboard"})})]}),(0,g.jsx)("pre",{className:"m-0 px-3 pb-3",children:(0,g.jsx)("code",{className:"language-".concat(d),children:(0,g.jsx)("span",{dangerouslySetInnerHTML:{__html:h.Z.highlight(n,{language:d}).value}})})}),o&&(0,g.jsx)(j.Z,{children:"Code copied to clipboard"})]})}},9963:function(d,b,a){"use strict";a.d(b,{aC:function(){return h},k8:function(){return i},nL:function(){return g}});var e=a(5893),c=a(4046),f=a.n(c);function g(a){var b=a.children;return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("h1",{className:"display-5 mt-2 mb-2",children:b}),(0,e.jsx)("p",{className:f().underline})]})}function h(a){var b=a.children;return(0,e.jsx)("h3",{className:"fw-light mt-5 mb-2",children:b})}function i(a){var b=a.children;return(0,e.jsx)("h4",{className:"fw-light mt-5 mb-2",children:b})}},4621:function(c,a,b){"use strict";var d=b(5893);a.Z=function(a){var c=a.src,b=a.title;return(0,d.jsxs)("div",{className:"p-3",children:[(0,d.jsx)("div",{className:"mb-3 text-secondary text-center",children:(0,d.jsx)("em",{children:b})}),(0,d.jsx)("img",{className:"img-fluid rounded border shadow",src:c,alt:b})]})}},7291:function(d,b,a){"use strict";var e=a(5893),c=a(9472),f=a.n(c);b.Z=function(a){var b=a.children;return(0,e.jsx)("mark",{className:"font-monospace border rounded p-1 ".concat(f().mark),children:b})}},3968:function(d,b,a){"use strict";var e=a(5893),c=a(3394),f=a.n(c);b.Z=function(a){var b=a.title,c=a.children;return(0,e.jsxs)("section",{className:"px-3 pt-1 my-5 ".concat(f().notes),children:[(0,e.jsxs)("h4",{className:"mb-3",children:[(0,e.jsx)("i",{className:"bi bi-info-circle me-2"}),void 0===b?"Note":b]}),c]})}},3511:function(f,b,a){"use strict";a.r(b);var g=a(5893),h=a(9963),i=a(130),j=a(7291),k=a(476),l=a(4621),c=a(3274),d=a(9927),e=a(358),m=a(3968),n=a(2018);b.default=(0,c.default)(function(b){var a=b.githubPath;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)("section",{children:[(0,g.jsx)(h.nL,{children:"Role Based Authorization"}),(0,g.jsxs)(i.Z,{children:["So far we are allowed to access any APIs once authenticated successfully. But there are APIs which are supposed to be accessed only by users having specific roles. In the last two chapters, we accessed one of the ADMIN APIs - ",(0,g.jsx)("u",{children:"ListStudents"})," - using Bob who does not have ADMIN role. In this chapter we will fix it by applying role-based authorization to secure the below APIs."]}),(0,g.jsxs)("table",{className:"table table-striped mb-4",children:[(0,g.jsx)("thead",{children:(0,g.jsxs)("tr",{children:[(0,g.jsx)("th",{children:"API"}),(0,g.jsx)("th",{children:"Authorization"})]})}),(0,g.jsxs)("tbody",{children:[(0,g.jsxs)("tr",{children:[(0,g.jsx)("td",{children:"List Students"}),(0,g.jsx)("td",{children:"Admin can only view the list of students"})]}),(0,g.jsxs)("tr",{children:[(0,g.jsx)("td",{children:"List Instructors"}),(0,g.jsx)("td",{children:"Admin can only view the list of instructors"})]}),(0,g.jsxs)("tr",{children:[(0,g.jsx)("td",{children:"Create Course"}),(0,g.jsx)("td",{children:"Instructors can only create a new course"})]})]})]})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Apply role-based restrictions with hasRole()"}),(0,g.jsxs)(i.Z,{children:["First let's add the above API urls in the ",(0,g.jsx)(j.Z,{children:"SecurityConstants"})," class like below:"]}),(0,g.jsx)(k.Z,{fileName:"SecurityConstants.java",href:a+"/src/main/java/com/facadecode/spring/security/constant/SecurityConstants.java",children:'\npublic static final String API_LIST_STUDENTS = "/api/v1/users/students";  \npublic static final String API_LIST_INSTRUCTORS = "/api/v1/users/instructors";\npublic static final String API_CREATE_COURSES = "/api/v1/courses";    \n'}),(0,g.jsxs)(i.Z,{children:["We can apply customised restrictions to specific urls using ",(0,g.jsx)(j.Z,{children:"antMatchers()"})," in ",(0,g.jsx)(j.Z,{children:"HttpSecurity"})," configuration. Here we want to apply role-based restrictions which can be achieved using ",(0,g.jsx)(j.Z,{children:"hasRole()"})," with appropriate RoleEnum instance for the above urls as below:"]}),(0,g.jsx)(k.Z,{fileName:"ApiSecurityConfig.java",href:a+"/src/main/java/com/facadecode/spring/security/config/ApiSecurityConfig.java",children:"\n@Configuration\npublic class ApiSecurityConfig {\n    @Bean\n    public SecurityFilterChain apiFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests(auth -> auth\n                .antMatchers(GET, PUBLIC_API_LIST).permitAll()\n                .antMatchers(API_LIST_STUDENTS, API_LIST_INSTRUCTORS).hasRole(ADMIN.name())\n                .antMatchers(POST, API_CREATE_COURSES).hasRole(INSTRUCTOR.name())\n                .anyRequest().authenticated()\n            )\n            .httpBasic();\n        return http.build();\n    }\n}\n"}),(0,g.jsxs)(i.Z,{children:["As ",(0,g.jsx)("u",{children:"ListCourses"})," and ",(0,g.jsx)("u",{children:"CreateCourse"})," endpoints are the same but with different HttpMethod, we have to specify ",(0,g.jsx)(j.Z,{children:"HttpMethod.POST"})," in the antMatchers for ",(0,g.jsx)("u",{children:"CreateCourse"})," API."]}),(0,g.jsxs)(i.Z,{children:["Restart the application and send a GET request to the ",(0,g.jsx)("u",{children:"ListStudents"})," API using Admin user. Though we have secured this API for ADMIN role, we will get ",(0,g.jsx)(j.Z,{children:"403 Forbidden"})," error. This is because Spring Security has no idea who has the ADMIN role, as we have not yet mapped the roles for any users while creating the list of ",(0,g.jsx)(j.Z,{children:"UserDetails"})," object."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson07-01.png",title:"403 Forbidden error while accessing ListStudents API as ADMIN user"})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Update UserDetails with Roles"}),(0,g.jsxs)(i.Z,{children:["We can use ",(0,g.jsx)(j.Z,{children:"roles()"})," method in ",(0,g.jsx)(j.Z,{children:"UserBuilder"})," class to map the roles from ",(0,g.jsx)(j.Z,{children:"AppUser"}),". It is an overloaded method, here we chose the one which accepts ",(0,g.jsx)(j.Z,{children:"String[]"})]}),(0,g.jsx)(k.Z,{fileName:"DbUserDetailsService.java",href:a+"/src/main/java/com/facadecode/spring/security/service/DbUserDetailsService.java",children:"\npublic List<UserDetails> getAllUserDetails() {\n    return appUserRepository.findAll()\n        .stream()\n        .map(appUser -> User.builder()\n            .username(appUser.getUsername())\n            .password(appUser.getPassword())\n            .authorities(Collections.EMPTY_SET)\n            .roles(this.getRoles(appUser.getRoles()))\n            .build()\n        )\n        .collect(Collectors.toList());\n}  \n\nprivate String[] getRoles(Set<AppRole> roles) {  \n    return roles.stream()\n        .map(role -> role.getName().name())\n        .collect(Collectors.toSet())\n        .toArray(new String[0]);\n}    \n"}),(0,g.jsxs)(i.Z,{children:["If we access the ",(0,g.jsx)("u",{children:"ListStudents"})," API using Admin user after restarting the application, we can see the list of students as response. But if we access the same API using Bob who does not have ADMIN role, we will get ",(0,g.jsx)(j.Z,{children:"403 Forbidden"})," error now."]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson07-02.png",title:"List of students for ADMIN user after mapping Roles"}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson07-03.png",title:"403 Forbidden for users other then ADMIN after mapping Roles"})]}),(0,g.jsxs)(m.Z,{children:[(0,g.jsxs)(i.Z,{children:["Both ",(0,g.jsx)(n.Z,{href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/User.UserBuilder.html#roles%28java.lang.String...%29",target:"_blank",children:"roles()"})," and ",(0,g.jsx)(n.Z,{href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/User.UserBuilder.html#authorities%28java.lang.String...%29",target:"_blank",children:"authorities()"})," populates the authorities in ",(0,g.jsx)(n.Z,{href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/User.html",target:"_blank",children:"User"})," class, as it has no specific attribute to hold the roles information. But roles() automatically prefixes each entry with ",(0,g.jsx)(j.Z,{children:"ROLE_"}),". This means  ",(0,g.jsx)(j.Z,{children:'builder.roles("ADMIN")'})," is equivalent to ",(0,g.jsx)(j.Z,{children:'builder.authorities("ROLE_ADMIN")'}),"."]}),(0,g.jsxs)(i.Z,{children:["Therefore we should never call them both on ",(0,g.jsx)(j.Z,{children:"UserBuilder"})," because the latter will always override the authorities set by the former. Here we are intentionally calling roles() after authorities() in order to override the Collections.EMPTY_SET."]}),(0,g.jsxs)(i.Z,{children:["There will be scenarios where you would want to set both roles and authorities. In such cases it is always preferable to pass the roles as argument to authorities() method, where each role must be explicitly prefixed with ",(0,g.jsx)("strong",{children:"ROLE_"})," by yourself. We will see this in action in the upcoming chapters."]})]})]})},(0,e.s)(d.Z,"role-based-authorization"))},5927:function(a){a.exports={linkIcon:"ArticleLink_linkIcon__cf7b_",linkText:"ArticleLink_linkText__b7K5H"}},4046:function(a){a.exports={heading:"Heading_heading__aP_DN",underline:"Heading_underline__sSwtx"}},9472:function(a){a.exports={mark:"Mark_mark__8gh_T"}},3394:function(a){a.exports={notes:"Notes_notes__up3CK"}}},function(a){a.O(0,[734,428,637,274,774,888,179],function(){var b;return a(a.s=4285)}),_N_E=a.O()}])