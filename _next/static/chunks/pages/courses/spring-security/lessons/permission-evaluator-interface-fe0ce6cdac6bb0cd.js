(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[200],{1758:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/courses/spring-security/lessons/permission-evaluator-interface",function(){return c(712)}])},476:function(d,b,a){"use strict";var e=a(7568),c=a(4051),f=a.n(c),g=a(5893),h=a(637),i=a(7294),j=a(1896);b.Z=function(a){var l,b=a.fileName,m=a.href,c=a.language,d=void 0===c?"java":c,n=a.children,k=(0,i.useState)(!1),o=k[0],q=k[1],p=(l=(0,e.Z)(f().mark(function a(){return f().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,navigator.clipboard.writeText(n);case 2:q(!0),setTimeout(function(){return q(!1)},6e3);case 4:case"end":return a.stop()}},a)})),function(){return l.apply(this,arguments)});return(0,g.jsxs)("div",{className:"border rounded fs-6 my-4",children:[b&&(0,g.jsxs)("div",{className:"p-3 bg-light border-bottom",children:[(0,g.jsx)("span",{className:"font-monospace",children:(0,g.jsx)("a",{href:m,target:"_blank",children:b})}),(0,g.jsx)("span",{className:"float-end cursor-pointer","data-bs-toggle":"tooltip","data-bs-title":"Copy code",onClick:p,children:(0,g.jsx)("i",{className:"bi-clipboard"})})]}),(0,g.jsx)("pre",{className:"m-0 px-3 pb-3",children:(0,g.jsx)("code",{className:"language-".concat(d),children:(0,g.jsx)("span",{dangerouslySetInnerHTML:{__html:h.Z.highlight(n,{language:d}).value}})})}),o&&(0,g.jsx)(j.Z,{children:"Code copied to clipboard"})]})}},9963:function(d,b,a){"use strict";a.d(b,{aC:function(){return h},k8:function(){return i},nL:function(){return g}});var e=a(5893),c=a(4046),f=a.n(c);function g(a){var b=a.children;return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("h1",{className:"display-5 mt-2 mb-2",children:b}),(0,e.jsx)("p",{className:f().underline})]})}function h(a){var b=a.children;return(0,e.jsx)("h3",{className:"fw-light mt-5 mb-2",children:b})}function i(a){var b=a.children;return(0,e.jsx)("h4",{className:"fw-light mt-5 mb-2",children:b})}},4621:function(c,a,b){"use strict";var d=b(5893);a.Z=function(a){var c=a.src,b=a.title;return(0,d.jsxs)("div",{className:"p-3",children:[(0,d.jsx)("div",{className:"mb-3 text-secondary text-center",children:(0,d.jsx)("em",{children:b})}),(0,d.jsx)("img",{className:"img-fluid rounded border shadow",src:c,alt:b})]})}},7291:function(d,b,a){"use strict";var e=a(5893),c=a(9472),f=a.n(c);b.Z=function(a){var b=a.children;return(0,e.jsx)("mark",{className:"font-monospace border rounded p-1 ".concat(f().mark),children:b})}},6614:function(d,b,a){"use strict";var e=a(5893),c=a(3394),f=a.n(c);b.Z=function(a){var b=a.title,c=a.children;return(0,e.jsxs)("section",{className:"px-3 pt-1 my-5 ".concat(f().notes),children:[(0,e.jsxs)("h4",{className:"mb-3",children:[(0,e.jsx)("i",{className:"bi bi-info-circle me-2"}),void 0===b?"Note":b]}),c]})}},712:function(f,b,a){"use strict";a.r(b);var g=a(5893),h=a(9963),i=a(130),j=a(7291),k=a(476),c=a(3274),d=a(9927),e=a(358),l=a(4621),m=a(6614);b.default=(0,c.default)(function(b){var a=b.githubPath;return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)("section",{children:[(0,g.jsx)(h.nL,{children:"PermissionEvaluator Interface"}),(0,g.jsxs)(i.Z,{children:["We said ",(0,g.jsx)(j.Z,{children:"PermissionEvaluator"})," interface is intended to be the bridge between SpEL and Spring Security's ACL system, but it has no hard dependencies to use only ACL module. So we can swap the Spring Security's ACL implementation with our own implementation to define ABAC rules."]}),(0,g.jsxs)(i.Z,{children:["Let's implement the ",(0,g.jsx)(j.Z,{children:"PermissionEvaluator"})," interface for ",(0,g.jsx)(j.Z,{children:"Course"})," entity and override the two ",(0,g.jsx)(j.Z,{children:"hasPermission()"})," methods. We will find the ",(0,g.jsx)("em",{children:"targetDomainObject"})," inside the method which receives ",(0,g.jsx)("em",{children:"targetId"})," and ",(0,g.jsx)("em",{children:"targetType"}),", and then call the other ",(0,g.jsx)(j.Z,{children:"hasPermission()"})," method which receives the ",(0,g.jsx)("em",{children:"targetDomainObject"}),"."]}),(0,g.jsx)(k.Z,{fileName:"CoursePermissionEvaluator.java",href:a+"/src/main/java/com/facadecode/spring/security/security/CoursePermissionEvaluator.java",children:"\n@Component\npublic class CoursePermissionEvaluator implements PermissionEvaluator {\n    // Autowired repositories omitted for brevity\n\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        if (targetDomainObject != null) {\n            Course course = (Course) targetDomainObject;\n            PermissionEnum permissionEnum = PermissionEnum.valueOf((String) permission);\n\n            switch(permissionEnum) {\n                case UPDATE_COURSE:\n                    return this.isCreatedBy(authentication, course);\n                case PLAY_COURSE:\n                    return this.isEnrolledStudent(authentication, course.getId()) || \n                            this.isCreatedBy(authentication, course);\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public boolean hasPermission(Authentication authentication, Serializable targetId, String targetType, Object permission) {\n        if (targetId != null) {\n            Long courseId = (Long) targetId;\n            Optional<Course> course = courseRepository.findById(courseId);\n            if (course.isPresent()) {\n                return this.hasPermission(authentication, course.get(), permission);\n            }\n        }\n        return false;\n    }\n}\n"}),(0,g.jsxs)(i.Z,{children:["By this way we can have the authorization check in only one method, but still we can use any of the two ",(0,g.jsx)(j.Z,{children:"hasPermission()"})," expressions based on the availability of either ",(0,g.jsx)(j.Z,{children:"courseId"})," or ",(0,g.jsx)(j.Z,{children:"Course"})," object defined in the service method signature."]}),(0,g.jsxs)(i.Z,{children:["Remember we defined the authorization logic for PLAY_COURSE and UPDATE_COURSE permissions in the previous chapter. We can use them inside ",(0,g.jsx)(j.Z,{children:"CoursePermissionEvaluator"})," like below:"]}),(0,g.jsx)(k.Z,{fileName:"CoursePermissionEvaluator.java",href:a+"/src/main/java/com/facadecode/spring/security/security/CoursePermissionEvaluator.java",children:"\n// PLAY_COURSE permission - Check if the course is enrolled by the authenticated user\nprivate boolean isEnrolledStudent(Authentication authentication, Long courseId) {\n    Optional<AppUser> student = appUserRepository.findByUsername(authentication.getName());\n    if (student.isPresent()) {\n        return student.get()\n                .getEnrolledCourses()\n                .stream()\n                .anyMatch(course -> course.getId().equals(courseId));\n    }\n    return false;\n}\n\n// UPDATE_COURSE permission - Check if the course is created by the authenticated user\nprivate boolean isCreatedBy(Authentication authentication, Course course) {\n    return course.getCreatedBy()\n            .getUsername()\n            .equalsIgnoreCase(authentication.getName());\n}\n"})]}),(0,g.jsxs)("section",{children:[(0,g.jsx)(h.aC,{children:"Register CoursePermissionEvaluator"}),(0,g.jsxs)(i.Z,{children:["Spring Security will not be aware of our ",(0,g.jsx)(j.Z,{children:"PermissionEvaluator"})," implementation unless we register it with ",(0,g.jsx)(j.Z,{children:"DefaultMethodSecurityExpressionHandler"}),". Let's do this in a Config class extending ",(0,g.jsx)(j.Z,{children:"GlobalMethodSecurityConfiguration"})," and overriding it's ",(0,g.jsx)(j.Z,{children:"createExpressionHandler()"})," method. Also it will be more appropriate to move ",(0,g.jsx)(j.Z,{children:"@EnableGobalMethodSecurity"})," to this new ",(0,g.jsx)(j.Z,{children:"SecurityConfig"}),"."]}),(0,g.jsx)(k.Z,{fileName:"SecurityConfig.java",href:a+"/src/main/java/com/facadecode/spring/security/config/SecurityConfig.java",children:"\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends GlobalMethodSecurityConfiguration {\n    @Autowired\n    private CoursePermissionEvaluator coursePermissionEvaluator;\n\n    @Override\n    protected MethodSecurityExpressionHandler createExpressionHandler() {\n        DefaultMethodSecurityExpressionHandler defaultMethodSecurityExpressionHandler\n                = new DefaultMethodSecurityExpressionHandler();\n        defaultMethodSecurityExpressionHandler.setPermissionEvaluator(coursePermissionEvaluator);\n        return defaultMethodSecurityExpressionHandler;\n    }\n}\n"}),(0,g.jsxs)(i.Z,{children:["Sending a ",(0,g.jsx)("u",{children:"PlayCourse"})," or an ",(0,g.jsx)("u",{children:"UpdateCourse"})," API request will now go through the ",(0,g.jsx)(j.Z,{children:"CoursePermissionEvaluator"})," to perform authorization check before reaching it's respective Service method. Let's send a ",(0,g.jsx)("u",{children:"PlayCourse"})," API request as Bob who is a Student for one of his enrolled courses, and we will get the course details like below:"]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson18-01.png",title:"Authorized request to PlayCourse API as Bob for one of his enrolled courses"}),(0,g.jsxs)(i.Z,{children:["Similarly if we send the same request for any other courses not enrolled by him we can expect to get ",(0,g.jsx)("em",{children:"403 Forbidden"})," error like below:"]}),(0,g.jsx)(l.Z,{src:"/assets/images/spring-security/lesson18-02.png",title:"Unauthorized access request as Bob to play one of the coursed not enrolled by him"}),(0,g.jsxs)(m.Z,{title:"Exercise",children:[(0,g.jsxs)(i.Z,{children:["Remember we have an authorization check ",(0,g.jsx)(j.Z,{children:"isInstructor()"})," implemented in ",(0,g.jsx)(j.Z,{children:"ServiceSecurity"})," for ",(0,g.jsx)("u",{children:"ViewProfile"})," service. In order to be consistent I encourage you to create another ",(0,g.jsx)(j.Z,{children:"PermissionEvaluator"})," implementation for ",(0,g.jsx)(j.Z,{children:"AppUser"})," entity and move the authorization check to here. We need to change the SpEL expression from ",(0,g.jsx)(j.Z,{children:"hasAuthority()"})," to ",(0,g.jsx)(j.Z,{children:"hasPermission()"})," in ",(0,g.jsx)(j.Z,{children:"Authority"})," constants class for VIEW_PROFILE permission. And we can remove ",(0,g.jsx)(j.Z,{children:"ServiceSecurity"})," class as we no longer need to dump all sorts of authorization checks there."]}),(0,g.jsxs)(i.Z,{children:["We know that Spring Security will not be aware of the new ",(0,g.jsx)(j.Z,{children:"AppUserPermissionEvaluator"})," unless we register it. But we can register only one implementation with ",(0,g.jsx)(j.Z,{children:"DefaultMethodSecurityExpressionHandler"}),". Let's see how we can use multiple ",(0,g.jsx)(j.Z,{children:"PermissionEvaluator"})," implementations in the next chapter."]})]})]})]})},(0,e.s)(d.Z,"permission-evaluator-interface"))},4046:function(a){a.exports={heading:"Heading_heading__aP_DN",underline:"Heading_underline__sSwtx"}},9472:function(a){a.exports={mark:"Mark_mark__8gh_T"}},3394:function(a){a.exports={notes:"Notes_notes__up3CK"}}},function(a){a.O(0,[734,428,637,274,774,888,179],function(){var b;return a(a.s=1758)}),_N_E=a.O()}])